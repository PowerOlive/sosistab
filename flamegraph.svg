<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="645.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="645.00"> </text><svg id="frames" x="10" width="1180"><g><title>__raw_callee_save___pv_queued_spin_unlock (3 samples, 16.67%)</title><rect x="22.2222%" y="117" width="16.6667%" height="15" fill="rgb(227,0,7)"/><text x="22.4722%" y="127.50">__raw_callee_save___pv_que..</text></g><g><title>async-io (10 samples, 55.56%)</title><rect x="0.0000%" y="597" width="55.5556%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="607.50">async-io</text></g><g><title>clone (10 samples, 55.56%)</title><rect x="0.0000%" y="581" width="55.5556%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="591.50">clone</text></g><g><title>start_thread (10 samples, 55.56%)</title><rect x="0.0000%" y="565" width="55.5556%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="575.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (10 samples, 55.56%)</title><rect x="0.0000%" y="549" width="55.5556%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="559.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (10 samples, 55.56%)</title><rect x="0.0000%" y="533" width="55.5556%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="543.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (10 samples, 55.56%)</title><rect x="0.0000%" y="517" width="55.5556%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="527.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (10 samples, 55.56%)</title><rect x="0.0000%" y="501" width="55.5556%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}} (10 samples, 55.56%)</title><rect x="0.0000%" y="485" width="55.5556%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="495.50">std::thread::Builder::spawn_unchecked::_{{closure}}</text></g><g><title>std::panic::catch_unwind (10 samples, 55.56%)</title><rect x="0.0000%" y="469" width="55.5556%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (10 samples, 55.56%)</title><rect x="0.0000%" y="453" width="55.5556%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (10 samples, 55.56%)</title><rect x="0.0000%" y="437" width="55.5556%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="447.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10 samples, 55.56%)</title><rect x="0.0000%" y="421" width="55.5556%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="431.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}} (10 samples, 55.56%)</title><rect x="0.0000%" y="405" width="55.5556%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="415.50">std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}}</text></g><g><title>async_io::reactor::Reactor::main_loop (10 samples, 55.56%)</title><rect x="0.0000%" y="389" width="55.5556%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="399.50">async_io::reactor::Reactor::main_loop</text></g><g><title>parking::Parker::park_timeout (10 samples, 55.56%)</title><rect x="0.0000%" y="373" width="55.5556%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="383.50">parking::Parker::park_timeout</text></g><g><title>parking::Inner::park (10 samples, 55.56%)</title><rect x="0.0000%" y="357" width="55.5556%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="367.50">parking::Inner::park</text></g><g><title>std::sync::condvar::Condvar::wait_timeout (10 samples, 55.56%)</title><rect x="0.0000%" y="341" width="55.5556%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="351.50">std::sync::condvar::Condvar::wait_timeout</text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (10 samples, 55.56%)</title><rect x="0.0000%" y="325" width="55.5556%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="335.50">std::sys_common::condvar::Condvar::wait_timeout</text></g><g><title>std::sys::unix::condvar::Condvar::wait_timeout (10 samples, 55.56%)</title><rect x="0.0000%" y="309" width="55.5556%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="319.50">std::sys::unix::condvar::Condvar::wait_timeout</text></g><g><title>__pthread_cond_timedwait (10 samples, 55.56%)</title><rect x="0.0000%" y="293" width="55.5556%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="303.50">__pthread_cond_timedwait</text></g><g><title>entry_SYSCALL_64_after_hwframe (10 samples, 55.56%)</title><rect x="0.0000%" y="277" width="55.5556%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="287.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (10 samples, 55.56%)</title><rect x="0.0000%" y="261" width="55.5556%" height="15" fill="rgb(221,5,38)"/><text x="0.2500%" y="271.50">do_syscall_64</text></g><g><title>__x64_sys_futex (10 samples, 55.56%)</title><rect x="0.0000%" y="245" width="55.5556%" height="15" fill="rgb(247,18,42)"/><text x="0.2500%" y="255.50">__x64_sys_futex</text></g><g><title>do_futex (10 samples, 55.56%)</title><rect x="0.0000%" y="229" width="55.5556%" height="15" fill="rgb(241,131,45)"/><text x="0.2500%" y="239.50">do_futex</text></g><g><title>futex_wait (10 samples, 55.56%)</title><rect x="0.0000%" y="213" width="55.5556%" height="15" fill="rgb(249,31,29)"/><text x="0.2500%" y="223.50">futex_wait</text></g><g><title>futex_wait_queue_me (10 samples, 55.56%)</title><rect x="0.0000%" y="197" width="55.5556%" height="15" fill="rgb(225,111,53)"/><text x="0.2500%" y="207.50">futex_wait_queue_me</text></g><g><title>schedule (10 samples, 55.56%)</title><rect x="0.0000%" y="181" width="55.5556%" height="15" fill="rgb(238,160,17)"/><text x="0.2500%" y="191.50">schedule</text></g><g><title>__sched_text_start (10 samples, 55.56%)</title><rect x="0.0000%" y="165" width="55.5556%" height="15" fill="rgb(214,148,48)"/><text x="0.2500%" y="175.50">__sched_text_start</text></g><g><title>finish_task_switch (10 samples, 55.56%)</title><rect x="0.0000%" y="149" width="55.5556%" height="15" fill="rgb(232,36,49)"/><text x="0.2500%" y="159.50">finish_task_switch</text></g><g><title>__perf_event_task_sched_in (9 samples, 50.00%)</title><rect x="5.5556%" y="133" width="50.0000%" height="15" fill="rgb(209,103,24)"/><text x="5.8056%" y="143.50">__perf_event_task_sched_in</text></g><g><title>x86_pmu_enable_all (3 samples, 16.67%)</title><rect x="38.8889%" y="117" width="16.6667%" height="15" fill="rgb(229,88,8)"/><text x="39.1389%" y="127.50">x86_pmu_enable_all</text></g><g><title>perf_4.19 (1 samples, 5.56%)</title><rect x="55.5556%" y="597" width="5.5556%" height="15" fill="rgb(213,181,19)"/><text x="55.8056%" y="607.50">perf_4...</text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 5.56%)</title><rect x="55.5556%" y="581" width="5.5556%" height="15" fill="rgb(254,191,54)"/><text x="55.8056%" y="591.50">entry_S..</text></g><g><title>do_syscall_64 (1 samples, 5.56%)</title><rect x="55.5556%" y="565" width="5.5556%" height="15" fill="rgb(241,83,37)"/><text x="55.8056%" y="575.50">do_sysc..</text></g><g><title>__x64_sys_execve (1 samples, 5.56%)</title><rect x="55.5556%" y="549" width="5.5556%" height="15" fill="rgb(233,36,39)"/><text x="55.8056%" y="559.50">__x64_s..</text></g><g><title>__do_execve_file.isra.36 (1 samples, 5.56%)</title><rect x="55.5556%" y="533" width="5.5556%" height="15" fill="rgb(226,3,54)"/><text x="55.8056%" y="543.50">__do_ex..</text></g><g><title>search_binary_handler (1 samples, 5.56%)</title><rect x="55.5556%" y="517" width="5.5556%" height="15" fill="rgb(245,192,40)"/><text x="55.8056%" y="527.50">search_..</text></g><g><title>load_elf_binary (1 samples, 5.56%)</title><rect x="55.5556%" y="501" width="5.5556%" height="15" fill="rgb(238,167,29)"/><text x="55.8056%" y="511.50">load_el..</text></g><g><title>setup_new_exec (1 samples, 5.56%)</title><rect x="55.5556%" y="485" width="5.5556%" height="15" fill="rgb(232,182,51)"/><text x="55.8056%" y="495.50">setup_n..</text></g><g><title>perf_event_exec (1 samples, 5.56%)</title><rect x="55.5556%" y="469" width="5.5556%" height="15" fill="rgb(231,60,39)"/><text x="55.8056%" y="479.50">perf_ev..</text></g><g><title>x86_pmu_enable_all (1 samples, 5.56%)</title><rect x="55.5556%" y="453" width="5.5556%" height="15" fill="rgb(208,69,12)"/><text x="55.8056%" y="463.50">x86_pmu..</text></g><g><title>[ld-2.28.so] (1 samples, 5.56%)</title><rect x="61.1111%" y="581" width="5.5556%" height="15" fill="rgb(235,93,37)"/><text x="61.3611%" y="591.50">[ld-2.2..</text></g><g><title>[ld-2.28.so] (1 samples, 5.56%)</title><rect x="61.1111%" y="565" width="5.5556%" height="15" fill="rgb(213,116,39)"/><text x="61.3611%" y="575.50">[ld-2.2..</text></g><g><title>[ld-2.28.so] (1 samples, 5.56%)</title><rect x="61.1111%" y="549" width="5.5556%" height="15" fill="rgb(222,207,29)"/><text x="61.3611%" y="559.50">[ld-2.2..</text></g><g><title>[ld-2.28.so] (1 samples, 5.56%)</title><rect x="61.1111%" y="533" width="5.5556%" height="15" fill="rgb(206,96,30)"/><text x="61.3611%" y="543.50">[ld-2.2..</text></g><g><title>[ld-2.28.so] (1 samples, 5.56%)</title><rect x="61.1111%" y="517" width="5.5556%" height="15" fill="rgb(218,138,4)"/><text x="61.3611%" y="527.50">[ld-2.2..</text></g><g><title>[ld-2.28.so] (1 samples, 5.56%)</title><rect x="61.1111%" y="501" width="5.5556%" height="15" fill="rgb(250,191,14)"/><text x="61.3611%" y="511.50">[ld-2.2..</text></g><g><title>_start (1 samples, 5.56%)</title><rect x="66.6667%" y="581" width="5.5556%" height="15" fill="rgb(239,60,40)"/><text x="66.9167%" y="591.50">_start</text></g><g><title>__libc_start_main (1 samples, 5.56%)</title><rect x="66.6667%" y="565" width="5.5556%" height="15" fill="rgb(206,27,48)"/><text x="66.9167%" y="575.50">__libc_..</text></g><g><title>main (1 samples, 5.56%)</title><rect x="66.6667%" y="549" width="5.5556%" height="15" fill="rgb(225,35,8)"/><text x="66.9167%" y="559.50">main</text></g><g><title>std::rt::lang_start_internal (1 samples, 5.56%)</title><rect x="66.6667%" y="533" width="5.5556%" height="15" fill="rgb(250,213,24)"/><text x="66.9167%" y="543.50">std::rt..</text></g><g><title>std::panic::catch_unwind (1 samples, 5.56%)</title><rect x="66.6667%" y="517" width="5.5556%" height="15" fill="rgb(247,123,22)"/><text x="66.9167%" y="527.50">std::pa..</text></g><g><title>std::panicking::try (1 samples, 5.56%)</title><rect x="66.6667%" y="501" width="5.5556%" height="15" fill="rgb(231,138,38)"/><text x="66.9167%" y="511.50">std::pa..</text></g><g><title>std::panicking::try::do_call (1 samples, 5.56%)</title><rect x="66.6667%" y="485" width="5.5556%" height="15" fill="rgb(231,145,46)"/><text x="66.9167%" y="495.50">std::pa..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1 samples, 5.56%)</title><rect x="66.6667%" y="469" width="5.5556%" height="15" fill="rgb(251,118,11)"/><text x="66.9167%" y="479.50">std::rt..</text></g><g><title>std::rt::lang_start::_{{closure}} (1 samples, 5.56%)</title><rect x="66.6667%" y="453" width="5.5556%" height="15" fill="rgb(217,147,25)"/><text x="66.9167%" y="463.50">std::rt..</text></g><g><title>socks5_server::main (1 samples, 5.56%)</title><rect x="66.6667%" y="437" width="5.5556%" height="15" fill="rgb(247,81,37)"/><text x="66.9167%" y="447.50">socks5_..</text></g><g><title>async_io::block_on (1 samples, 5.56%)</title><rect x="66.6667%" y="421" width="5.5556%" height="15" fill="rgb(209,12,38)"/><text x="66.9167%" y="431.50">async_i..</text></g><g><title>async_io::reactor::Reactor::block_on (1 samples, 5.56%)</title><rect x="66.6667%" y="405" width="5.5556%" height="15" fill="rgb(227,1,9)"/><text x="66.9167%" y="415.50">async_i..</text></g><g><title>async_io::reactor::ReactorLock::react (1 samples, 5.56%)</title><rect x="66.6667%" y="389" width="5.5556%" height="15" fill="rgb(248,47,43)"/><text x="66.9167%" y="399.50">async_i..</text></g><g><title>polling::Poller::wait (1 samples, 5.56%)</title><rect x="66.6667%" y="373" width="5.5556%" height="15" fill="rgb(221,10,30)"/><text x="66.9167%" y="383.50">polling..</text></g><g><title>polling::epoll::Poller::wait (1 samples, 5.56%)</title><rect x="66.6667%" y="357" width="5.5556%" height="15" fill="rgb(210,229,1)"/><text x="66.9167%" y="367.50">polling..</text></g><g><title>epoll_wait (1 samples, 5.56%)</title><rect x="66.6667%" y="341" width="5.5556%" height="15" fill="rgb(222,148,37)"/><text x="66.9167%" y="351.50">epoll_w..</text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 5.56%)</title><rect x="66.6667%" y="325" width="5.5556%" height="15" fill="rgb(234,67,33)"/><text x="66.9167%" y="335.50">entry_S..</text></g><g><title>do_syscall_64 (1 samples, 5.56%)</title><rect x="66.6667%" y="309" width="5.5556%" height="15" fill="rgb(247,98,35)"/><text x="66.9167%" y="319.50">do_sysc..</text></g><g><title>__x64_sys_epoll_wait (1 samples, 5.56%)</title><rect x="66.6667%" y="293" width="5.5556%" height="15" fill="rgb(247,138,52)"/><text x="66.9167%" y="303.50">__x64_s..</text></g><g><title>do_epoll_wait (1 samples, 5.56%)</title><rect x="66.6667%" y="277" width="5.5556%" height="15" fill="rgb(213,79,30)"/><text x="66.9167%" y="287.50">do_epol..</text></g><g><title>ep_poll (1 samples, 5.56%)</title><rect x="66.6667%" y="261" width="5.5556%" height="15" fill="rgb(246,177,23)"/><text x="66.9167%" y="271.50">ep_poll</text></g><g><title>schedule_hrtimeout_range_clock (1 samples, 5.56%)</title><rect x="66.6667%" y="245" width="5.5556%" height="15" fill="rgb(230,62,27)"/><text x="66.9167%" y="255.50">schedul..</text></g><g><title>schedule (1 samples, 5.56%)</title><rect x="66.6667%" y="229" width="5.5556%" height="15" fill="rgb(216,154,8)"/><text x="66.9167%" y="239.50">schedule</text></g><g><title>__sched_text_start (1 samples, 5.56%)</title><rect x="66.6667%" y="213" width="5.5556%" height="15" fill="rgb(244,35,45)"/><text x="66.9167%" y="223.50">__sched..</text></g><g><title>finish_task_switch (1 samples, 5.56%)</title><rect x="66.6667%" y="197" width="5.5556%" height="15" fill="rgb(251,115,12)"/><text x="66.9167%" y="207.50">finish_..</text></g><g><title>apic_timer_interrupt (1 samples, 5.56%)</title><rect x="66.6667%" y="181" width="5.5556%" height="15" fill="rgb(240,54,50)"/><text x="66.9167%" y="191.50">apic_ti..</text></g><g><title>smp_apic_timer_interrupt (1 samples, 5.56%)</title><rect x="66.6667%" y="165" width="5.5556%" height="15" fill="rgb(233,84,52)"/><text x="66.9167%" y="175.50">smp_api..</text></g><g><title>hrtimer_interrupt (1 samples, 5.56%)</title><rect x="66.6667%" y="149" width="5.5556%" height="15" fill="rgb(207,117,47)"/><text x="66.9167%" y="159.50">hrtimer..</text></g><g><title>__hrtimer_run_queues (1 samples, 5.56%)</title><rect x="66.6667%" y="133" width="5.5556%" height="15" fill="rgb(249,43,39)"/><text x="66.9167%" y="143.50">__hrtim..</text></g><g><title>tick_sched_timer (1 samples, 5.56%)</title><rect x="66.6667%" y="117" width="5.5556%" height="15" fill="rgb(209,38,44)"/><text x="66.9167%" y="127.50">tick_sc..</text></g><g><title>tick_sched_handle (1 samples, 5.56%)</title><rect x="66.6667%" y="101" width="5.5556%" height="15" fill="rgb(236,212,23)"/><text x="66.9167%" y="111.50">tick_sc..</text></g><g><title>update_process_times (1 samples, 5.56%)</title><rect x="66.6667%" y="85" width="5.5556%" height="15" fill="rgb(242,79,21)"/><text x="66.9167%" y="95.50">update_..</text></g><g><title>scheduler_tick (1 samples, 5.56%)</title><rect x="66.6667%" y="69" width="5.5556%" height="15" fill="rgb(211,96,35)"/><text x="66.9167%" y="79.50">schedul..</text></g><g><title>_raw_spin_lock (1 samples, 5.56%)</title><rect x="66.6667%" y="53" width="5.5556%" height="15" fill="rgb(253,215,40)"/><text x="66.9167%" y="63.50">_raw_sp..</text></g><g><title>__pv_queued_spin_lock_slowpath (1 samples, 5.56%)</title><rect x="66.6667%" y="37" width="5.5556%" height="15" fill="rgb(211,81,21)"/><text x="66.9167%" y="47.50">__pv_qu..</text></g><g><title>clone (1 samples, 5.56%)</title><rect x="72.2222%" y="581" width="5.5556%" height="15" fill="rgb(208,190,38)"/><text x="72.4722%" y="591.50">clone</text></g><g><title>ret_from_fork (1 samples, 5.56%)</title><rect x="72.2222%" y="565" width="5.5556%" height="15" fill="rgb(235,213,38)"/><text x="72.4722%" y="575.50">ret_fro..</text></g><g><title>schedule_tail (1 samples, 5.56%)</title><rect x="72.2222%" y="549" width="5.5556%" height="15" fill="rgb(237,122,38)"/><text x="72.4722%" y="559.50">schedul..</text></g><g><title>finish_task_switch (1 samples, 5.56%)</title><rect x="72.2222%" y="533" width="5.5556%" height="15" fill="rgb(244,218,35)"/><text x="72.4722%" y="543.50">finish_..</text></g><g><title>__perf_event_task_sched_in (1 samples, 5.56%)</title><rect x="72.2222%" y="517" width="5.5556%" height="15" fill="rgb(240,68,47)"/><text x="72.4722%" y="527.50">__perf_..</text></g><g><title>x86_pmu_enable_all (1 samples, 5.56%)</title><rect x="72.2222%" y="501" width="5.5556%" height="15" fill="rgb(210,16,53)"/><text x="72.4722%" y="511.50">x86_pmu..</text></g><g><title>elf_map (2 samples, 11.11%)</title><rect x="77.7778%" y="485" width="11.1111%" height="15" fill="rgb(235,124,12)"/><text x="78.0278%" y="495.50">elf_map</text></g><g><title>vm_mmap_pgoff (2 samples, 11.11%)</title><rect x="77.7778%" y="469" width="11.1111%" height="15" fill="rgb(224,169,11)"/><text x="78.0278%" y="479.50">vm_mmap_pgoff</text></g><g><title>do_mmap (2 samples, 11.11%)</title><rect x="77.7778%" y="453" width="11.1111%" height="15" fill="rgb(250,166,2)"/><text x="78.0278%" y="463.50">do_mmap</text></g><g><title>mmap_region (2 samples, 11.11%)</title><rect x="77.7778%" y="437" width="11.1111%" height="15" fill="rgb(242,216,29)"/><text x="78.0278%" y="447.50">mmap_region</text></g><g><title>vm_area_alloc (2 samples, 11.11%)</title><rect x="77.7778%" y="421" width="11.1111%" height="15" fill="rgb(230,116,27)"/><text x="78.0278%" y="431.50">vm_area_alloc</text></g><g><title>kmem_cache_alloc (2 samples, 11.11%)</title><rect x="77.7778%" y="405" width="11.1111%" height="15" fill="rgb(228,99,48)"/><text x="78.0278%" y="415.50">kmem_cache_alloc</text></g><g><title>_cond_resched (2 samples, 11.11%)</title><rect x="77.7778%" y="389" width="11.1111%" height="15" fill="rgb(253,11,6)"/><text x="78.0278%" y="399.50">_cond_resched</text></g><g><title>preempt_schedule_common (2 samples, 11.11%)</title><rect x="77.7778%" y="373" width="11.1111%" height="15" fill="rgb(247,143,39)"/><text x="78.0278%" y="383.50">preempt_schedule..</text></g><g><title>__sched_text_start (2 samples, 11.11%)</title><rect x="77.7778%" y="357" width="11.1111%" height="15" fill="rgb(236,97,10)"/><text x="78.0278%" y="367.50">__sched_text_sta..</text></g><g><title>finish_task_switch (2 samples, 11.11%)</title><rect x="77.7778%" y="341" width="11.1111%" height="15" fill="rgb(233,208,19)"/><text x="78.0278%" y="351.50">finish_task_swit..</text></g><g><title>__perf_event_task_sched_in (2 samples, 11.11%)</title><rect x="77.7778%" y="325" width="11.1111%" height="15" fill="rgb(216,164,2)"/><text x="78.0278%" y="335.50">__perf_event_tas..</text></g><g><title>all (18 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="623.50"></text></g><g><title>socks5_server (7 samples, 38.89%)</title><rect x="61.1111%" y="597" width="38.8889%" height="15" fill="rgb(242,17,10)"/><text x="61.3611%" y="607.50">socks5_server</text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 22.22%)</title><rect x="77.7778%" y="581" width="22.2222%" height="15" fill="rgb(242,107,0)"/><text x="78.0278%" y="591.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (4 samples, 22.22%)</title><rect x="77.7778%" y="565" width="22.2222%" height="15" fill="rgb(251,28,31)"/><text x="78.0278%" y="575.50">do_syscall_64</text></g><g><title>__x64_sys_execve (4 samples, 22.22%)</title><rect x="77.7778%" y="549" width="22.2222%" height="15" fill="rgb(233,223,10)"/><text x="78.0278%" y="559.50">__x64_sys_execve</text></g><g><title>__do_execve_file.isra.36 (4 samples, 22.22%)</title><rect x="77.7778%" y="533" width="22.2222%" height="15" fill="rgb(215,21,27)"/><text x="78.0278%" y="543.50">__do_execve_file.isra.36</text></g><g><title>search_binary_handler (4 samples, 22.22%)</title><rect x="77.7778%" y="517" width="22.2222%" height="15" fill="rgb(232,23,21)"/><text x="78.0278%" y="527.50">search_binary_handler</text></g><g><title>load_elf_binary (4 samples, 22.22%)</title><rect x="77.7778%" y="501" width="22.2222%" height="15" fill="rgb(244,5,23)"/><text x="78.0278%" y="511.50">load_elf_binary</text></g><g><title>setup_arg_pages (2 samples, 11.11%)</title><rect x="88.8889%" y="485" width="11.1111%" height="15" fill="rgb(226,81,46)"/><text x="89.1389%" y="495.50">setup_arg_pages</text></g><g><title>down_write_killable (2 samples, 11.11%)</title><rect x="88.8889%" y="469" width="11.1111%" height="15" fill="rgb(247,70,30)"/><text x="89.1389%" y="479.50">down_write_killa..</text></g><g><title>_cond_resched (2 samples, 11.11%)</title><rect x="88.8889%" y="453" width="11.1111%" height="15" fill="rgb(212,68,19)"/><text x="89.1389%" y="463.50">_cond_resched</text></g><g><title>preempt_schedule_common (2 samples, 11.11%)</title><rect x="88.8889%" y="437" width="11.1111%" height="15" fill="rgb(240,187,13)"/><text x="89.1389%" y="447.50">preempt_schedule..</text></g><g><title>__sched_text_start (2 samples, 11.11%)</title><rect x="88.8889%" y="421" width="11.1111%" height="15" fill="rgb(223,113,26)"/><text x="89.1389%" y="431.50">__sched_text_sta..</text></g><g><title>finish_task_switch (2 samples, 11.11%)</title><rect x="88.8889%" y="405" width="11.1111%" height="15" fill="rgb(206,192,2)"/><text x="89.1389%" y="415.50">finish_task_swit..</text></g><g><title>__perf_event_task_sched_in (2 samples, 11.11%)</title><rect x="88.8889%" y="389" width="11.1111%" height="15" fill="rgb(241,108,4)"/><text x="89.1389%" y="399.50">__perf_event_tas..</text></g><g><title>__raw_callee_save___pv_queued_spin_unlock (2 samples, 11.11%)</title><rect x="88.8889%" y="373" width="11.1111%" height="15" fill="rgb(247,173,49)"/><text x="89.1389%" y="383.50">__raw_callee_sav..</text></g></svg></svg>